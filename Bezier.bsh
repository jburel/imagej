image = IJ.getImage();
roi = image.getRoi();
print(roi);

x = roi.getXCoordinates();
y = roi.getYCoordinates();

distance(x1, y1, x2, y2) {
	double x = x1 - x2;
	double y = y1 - y2;
	return Math.sqrt(x * x + y * y);
}

lengthBound(x1, y1, cx1, cy1, cx2, cy2, x2, y2) {
	return distance(x1, y1, cx1, cy1)
		+ distance(cx1, cy1, cx2, cy2)
		+ distance(cx2, cy2, x2, y2);
}

void fillArray(float[] x, float[] y, int offset, int length,
		float x1, float y1, float cx1, float cy1, float cx2, float cy2, float x2, float y2) {
	if (length < 3) {
print("offset: " + offset + ", length: " + length + ", (" + x1 + ", " + y1 + ")");
		if (length == 1) {
			x[offset] = (x1 + x2) / 2;
			y[offset] = (y1 + y2) / 2;
		}
		else if (length == 2) {
			x[offset] = x1;
			y[offset] = y1;
			x[offset + 1] = x2;
			y[offset + 1] = y2;
		}
	}
	else {
		float hx = (cx1 + cx2) / 2;
		float hy = (cy1 + cy2) / 2;
		float cx3 = (x1 + cx1) / 2;
		float cy3 = (y1 + cy1) / 2;
		float cx4 = (cx1 + hx) / 2;
		float cy4 = (cy1 + hy) / 2;
		float cx5 = (hx + cx2) / 2;
		float cy5 = (hy + cy2) / 2;
		float cx6 = (cx2 + x2) / 2;
		float cy6 = (cy2 + y2) / 2;
		float x3 = (cx4 + cx5) / 2;
		float y3 = (cy4 + cy5) / 2;

		double lengthBound1 = lengthBound(x1, y1, cx3, cy3, cx4, cy4, x3, y3);
		double lengthBound2 = lengthBound(x3, y3, cx5, cy5, cx6, cy6, x2, y2);

		int length1 = (int)(lengthBound1 * length / (lengthBound1 + lengthBound2) + 0.5);
		if (length1 < 1)
			length1 = 1;
		else if (length1 >= length)
			length1 = length - 1;
		fillArray(x, y, offset, length1, x1, y1, cx3, cy3, cx4, cy4, x3, y3);
		fillArray(x, y, offset + length1, length - length1, x3, y3, cx5, cy5, cx6, cy6, x2, y2);
	}
}

fillArray2(float[] x, float[] y, int length,
		float x1, float y1, float cx1, float cy1, float cx2, float cy2, float x2, float y2) {
	if (length == 0)
		return;
	x[0] = x1;
	y[0] = y1;
	if (length == 1)
		return;
	x[length - 1] = x2;
	y[length - 1] = y2;
	for (int i = 1; i + 1 < length; i++) {
		float t = i / (float)(length - 1);
		float factor = t * t * t;
		float xValue = factor * x2;
		float yValue = factor * y2;
		factor *= (1 - t) / t;
		xValue += 3 * factor * cx2;
		yValue += 3 * factor * cy2;
		factor *= (1 - t) / t;
		xValue += 3 * factor * cx1;
		yValue += 3 * factor * cy1;
		factor *= (1 - t) / t;
		xValue += factor * x1;
		yValue += factor * y1;
		x[i] = xValue;
		y[i] = yValue;
	}
}
		
int lengthBound = (int)lengthBound(x[0], y[0], x[1], y[1], x[2], y[2], x[3], y[3]);
float[] xCoords = new float[lengthBound];
float[] yCoords = new float[lengthBound];
bounds = roi.getBounds();
fillArray2(xCoords, yCoords, /* 0, */ lengthBound,
	bounds.x + x[0], bounds.y + y[0],
	bounds.x + x[1], bounds.y + y[1],
	bounds.x + x[2], bounds.y + y[2],
	bounds.x + x[3], bounds.y + y[3]);
roi2 = new PolygonRoi(xCoords, yCoords, lengthBound, PolygonRoi.POLYLINE);

xCoords = new float[lengthBound];
yCoords = new float[lengthBound];
fillArray(xCoords, yCoords, 0, lengthBound,
	bounds.x + x[0], bounds.y + y[0],
	bounds.x + x[1], bounds.y + y[1],
	bounds.x + x[2], bounds.y + y[2],
	bounds.x + x[3], bounds.y + y[3]);
roi3 = new PolygonRoi(xCoords, yCoords, lengthBound, PolygonRoi.POLYLINE);

import ij.gui.Overlay;
overlay = new Overlay(roi3);
image.setOverlay(overlay);

image.setRoi(roi2);
//image.setOverlay(null);